import { useEffect, useState, useRef, Fragment } from "react";
import Image from "next/image";
import Head from "next/head";
import { AnimatePresence, motion } from "framer-motion";
import { TransformWrapper, TransformComponent } from "react-zoom-pan-pinch";
import { locations } from "@/constants/starcourt-locations";
import { useWindowDimensions } from "@/infrastructure/hooks";
import {
  Button,
  FloorPicker,
  MapPin,
  MapTooltip,
  ZoomControls,
} from "@/components";
import { roundNumber } from "@/infrastructure/utils/roundNumber";
import type { LocationType } from "@/constants/locations";
import type { CSSProperties, KeyboardEvent } from "react";
import type { StarCourtLocationFloor1 } from "@/constants/starcourt-locations";

import styles from "../styles/Starcourt.module.scss";

export default function Starcourt() {
  const BASE_IMAGE_SIZE = { width: 2048, height: 1288 };
  const windowDimensions = useWindowDimensions();
  const [scale, setScale] = useState<number>(1);
  const [showFloorPicker, setShowFloorPicker] = useState<boolean>(false);
  const [isPanning, setIsPanning] = useState<boolean>(false);
  const [imageSize, setImageSize] = useState<{ width: number; height: number }>(
    { width: 2048, height: 1288 }
  );
  const [currentFloor, setCurrentFloor] = useState<1 | 2>(1);
  const [highlightedMapArea, setHighlightedMapArea] =
    useState<StarCourtLocationFloor1 | null>(null);

  const MIN_SCALE = 1;
  const MAX_SCALE = 3;
  const WHEEL_STEP = 0.2;

  useEffect(() => {
    const BASE_IMAGE_SIZE = { width: 2048, height: 1288 };

    const { width: windowWidth, height: windowHeight } = windowDimensions;

    if (windowWidth && windowHeight) {
      const imageHeightIfFullWidth =
        (BASE_IMAGE_SIZE.height * windowWidth) / BASE_IMAGE_SIZE.width;
      const imageWidthIfFullHeight =
        (BASE_IMAGE_SIZE.width * windowHeight) / BASE_IMAGE_SIZE.height;
      const imageIsFullWidth = imageHeightIfFullWidth >= windowHeight;

      setImageSize({
        width: imageIsFullWidth ? windowWidth : imageWidthIfFullHeight,
        height: imageIsFullWidth ? imageHeightIfFullWidth : windowHeight,
      });
    }
  }, [windowDimensions]);

  return (
    <>
      <Head>
        <title>Hawkins Map</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <meta name="theme-color" content="#3057e1" />
      </Head>
      <main>
        <div className={styles.mapWrapper}>
          <div className={styles.background}>
            <motion.div
              className={styles.horizontalLines}
              initial={{ scaleY: 0 }}
              animate={{
                scaleY: 1,
                transition: { duration: 1.5, type: "tween", ease: "easeOut" },
              }}
              exit={{
                scaleY: 0,
                transition: { duration: 0.2, type: "tween", ease: "easeIn" },
              }}
            />
            <motion.div
              className={styles.verticalLines}
              initial={{ scaleX: 0 }}
              animate={{
                scaleX: 1,
                transition: { duration: 1.5, type: "tween", ease: "easeOut" },
              }}
              exit={{
                scaleX: 0,
                transition: { duration: 0.2, type: "tween", ease: "easeIn" },
              }}
            />
          </div>
          <TransformWrapper
            key="starcourt-map"
            initialScale={scale}
            maxScale={MAX_SCALE}
            // centerOnInit
            onPanningStart={() => setIsPanning(true)}
            onPanningStop={() => setIsPanning(false)}
            // onPinchingStop={(event) => setScale(event.state.scale)}
            onZoomStop={(event) => setScale(event.state.scale)}
            // onWheelStop={(event) => setScale(event.state.scale)}
            wheel={{ step: WHEEL_STEP }}
            pinch={{ step: WHEEL_STEP }}
            doubleClick={{ step: WHEEL_STEP }}
          >
            {({ zoomIn, zoomOut, zoomToElement }) => (
              <Fragment>
                <motion.div
                  className={styles.backBtn}
                  initial={{ x: "-100%", opacity: 0 }}
                  animate={{
                    x: 0,
                    opacity: 1,
                    transition: {
                      duration: 1,
                      type: "tween",
                      ease: "easeOut",
                    },
                  }}
                  exit={{
                    x: "-100%",
                    opacity: 0,
                    transition: {
                      duration: 0.2,
                      type: "tween",
                      ease: "easeIn",
                    },
                  }}
                >
                  <Button href="/" label="Back to Hawkins" variant="light" />
                  <Button
                    onClick={() => setShowFloorPicker(!showFloorPicker)}
                    label="Change floor"
                    variant="light"
                  />
                </motion.div>

                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{
                    opacity: 1,
                    transition: {
                      duration: 1,
                      type: "tween",
                      ease: "easeOut",
                    },
                  }}
                  exit={{
                    opacity: 0,
                    transition: {
                      duration: 0.2,
                      type: "tween",
                      ease: "easeIn",
                    },
                  }}
                  className={styles.logo}
                >
                  <Image
                    src="/assets/starcourt-mall-logo.svg"
                    alt="Starcourt Mall Logo"
                    width="819"
                    height="236"
                  />
                </motion.div>
                <FloorPicker
                  currentFloor={currentFloor}
                  setCurrentFloor={setCurrentFloor}
                  showPicker={showFloorPicker}
                  setShowPicker={setShowFloorPicker}
                />
                <TransformComponent
                  wrapperStyle={{
                    width: "100%",
                    height: "100vh",
                    position: "relative",
                  }}
                >
                  <motion.div
                    className={styles.map}
                    style={
                      {
                        "--base-map-width": imageSize.width,
                        "--base-map-height": imageSize.height,
                        cursor: isPanning ? "grabbing" : "grab",
                      } as CSSProperties
                    }
                    initial={{ opacity: 0 }}
                    animate={{
                      opacity: showFloorPicker ? 0 : 1,
                      transition: {
                        duration: 0.75,
                        type: "tween",
                        ease: "easeOut",
                      },
                    }}
                    exit={{
                      opacity: 0,
                      transition: {
                        duration: 0.5,
                        type: "tween",
                        ease: "easeIn",
                      },
                    }}
                  >
                    <Image
                      src={`/assets/starcourt-mall-floor-${currentFloor}.svg`}
                      alt="Starcourt Mall Blueprint"
                      width={imageSize.width}
                      height={imageSize.height}
                      useMap="#starcourtMallMap"
                      // onClick={() => setVisibleMapPin(null)}
                    />

                    <map
                      name="starcourtMallMap"
                      id="starcourtMallMap"
                      //   onMouseOver={() => console.log("mouseOver parent")}
                    >
                      {locations.map((location) => (
                        <area
                          key={location.id}
                          shape="poly"
                          coords={locations[0].coords
                            .map(
                              (coord) =>
                                `${
                                  (coord.x * imageSize.width) /
                                  BASE_IMAGE_SIZE.width
                                },${
                                  (coord.y * imageSize.height) /
                                  BASE_IMAGE_SIZE.height
                                }`
                            )
                            .join(", ")}
                          href={`#${location.id}`}
                          //   title={location.title}
                          alt={location.title}
                          //   id={`${location.id}-map-area`}
                          onMouseOver={() => setHighlightedMapArea(location.id)}
                          onMouseLeave={() => setHighlightedMapArea(null)}
                        />
                      ))}
                    </map>
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="2048"
                      height="1288"
                      fill="none"
                      viewBox="0 0 2048 1288"
                    >
                      <path
                        fill="aliceblue"
                        d="M666.5 982.5v70.5H699v10.5h22v-14h53.5v-67h-108z"
                        fillOpacity={
                          highlightedMapArea === "scoops-ahoy" ? 0.5 : 0
                        }
                      />
                    </svg>
                  </motion.div>
                </TransformComponent>
              </Fragment>
            )}
          </TransformWrapper>
        </div>
      </main>
    </>
  );
}
